Index: src/br/com/unifor/main/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.unifor.main;\r\n\r\nimport br.com.unifor.structures.LinkedList;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/br/com/unifor/main/Main.java b/src/br/com/unifor/main/Main.java
--- a/src/br/com/unifor/main/Main.java	(revision 4af214dda39eb8e50e317bca377a7dac6141dfb8)
+++ b/src/br/com/unifor/main/Main.java	(date 1748808496080)
@@ -1,9 +1,19 @@
 package br.com.unifor.main;
 
+import br.com.unifor.structures.DynamicQueue;
 import br.com.unifor.structures.LinkedList;
+import br.com.unifor.structures.Word;
 
 public class Main {
     public static void main(String[] args) {
+        DynamicQueue dynamicQueue = new DynamicQueue();
+        Word word = new Word("Ola");
+        Word word2 = new Word("Olaa");
+        Word word3 = new Word("Olaaa");
+        dynamicQueue.enqueue(word);
+        dynamicQueue.enqueue(word2);
+        dynamicQueue.enqueue(word3);
+        dynamicQueue.print();
 
     }
 }
Index: src/br/com/unifor/structures/NodeABB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.unifor.structures;\r\n\r\npublic class NodeABB {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/br/com/unifor/structures/NodeABB.java b/src/br/com/unifor/structures/NodeABB.java
--- a/src/br/com/unifor/structures/NodeABB.java	(revision 4af214dda39eb8e50e317bca377a7dac6141dfb8)
+++ b/src/br/com/unifor/structures/NodeABB.java	(date 1748808253327)
@@ -1,4 +1,5 @@
 package br.com.unifor.structures;
 
 public class NodeABB {
+
 }
Index: src/br/com/unifor/structures/LinkedList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.unifor.structures;\r\n\r\npublic class LinkedList {\r\n    private Node first;\r\n    private Node last;\r\n    private int numberOfElements;\r\n\r\n    public LinkedList() {\r\n        this.first = null;\r\n        this.last = null;\r\n        this.numberOfElements = 0;\r\n    }\r\n\r\n    public void addAtAnyPosition(int element, int position) {\r\n        if (position < 0 || position > this.numberOfElements) {\r\n            throw new IndexOutOfBoundsException(\"Posição inválida\");\r\n        }\r\n        if (position == 0) {\r\n            Node newNode = new Node(element);\r\n            if (this.first == null) {\r\n                this.last = newNode;\r\n                this.first = newNode;\r\n            } else {\r\n                newNode.setNext(newNode);\r\n                this.first = newNode;\r\n            }\r\n            this.numberOfElements++;\r\n        } else if (position == numberOfElements) {\r\n            Node newNode = new Node(element);\r\n            if (this.last == null) {\r\n                this.first = newNode;\r\n                this.last = newNode;\r\n            } else {\r\n                this.last.setNext(newNode);\r\n                this.last = newNode;\r\n            }\r\n            this.numberOfElements++;\r\n\r\n        } else {\r\n            Node newNode = new Node(element);\r\n            Node currentlyNode = this.first;\r\n            for (int i = 0; i < position - 1; i++) {\r\n                currentlyNode = currentlyNode.getNext();\r\n            }\r\n            newNode.setNext(currentlyNode.getNext());\r\n            currentlyNode.setNext(newNode);\r\n            this.numberOfElements++;\r\n        }\r\n    }\r\n\r\n    public void removeAtAnyPosition(int position) {\r\n        if (position < 0 || position > this.numberOfElements) {\r\n            System.out.println(\"A lista está vazia\");\r\n        }\r\n        if (position == 0) {\r\n            if (this.first == null) {\r\n                System.out.println(\"A lista está vazia\");\r\n            } else {\r\n                this.first = this.first.getNext();\r\n                this.numberOfElements--;\r\n                if (numberOfElements == 0) {\r\n                    this.last = null;\r\n                }\r\n            }\r\n        } else if (position == this.numberOfElements - 1) {\r\n            if (this.last == null) {\r\n                System.out.println(\"A lista está vazia\");\r\n            } else {\r\n                if (this.first == this.last) {\r\n                    this.first = null;\r\n                    this.last = null;\r\n                } else {\r\n                    Node currentlyNode = this.first;\r\n                    while (currentlyNode.getNext() != this.last) {\r\n                        currentlyNode = currentlyNode.getNext();\r\n                    }\r\n                    this.last = currentlyNode;\r\n                    currentlyNode.setNext(null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void printLinkedList() {\r\n        Node currentNode = this.first;\r\n        System.out.println(\"Lista: \");\r\n        while (currentNode != null) {\r\n            System.out.print(currentNode.getElement() + \" \");\r\n            currentNode = currentNode.getNext();\r\n        }\r\n    }\r\n\r\n    public int getNumberOfElements() {\r\n        return numberOfElements;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/br/com/unifor/structures/LinkedList.java b/src/br/com/unifor/structures/LinkedList.java
--- a/src/br/com/unifor/structures/LinkedList.java	(revision 4af214dda39eb8e50e317bca377a7dac6141dfb8)
+++ b/src/br/com/unifor/structures/LinkedList.java	(date 1748808536801)
@@ -11,12 +11,12 @@
         this.numberOfElements = 0;
     }
 
-    public void addAtAnyPosition(int element, int position) {
+    public void addAtAnyPosition(Word word, int position) {
         if (position < 0 || position > this.numberOfElements) {
             throw new IndexOutOfBoundsException("Posição inválida");
         }
         if (position == 0) {
-            Node newNode = new Node(element);
+            Node newNode = new Node(word);
             if (this.first == null) {
                 this.last = newNode;
                 this.first = newNode;
@@ -26,7 +26,7 @@
             }
             this.numberOfElements++;
         } else if (position == numberOfElements) {
-            Node newNode = new Node(element);
+            Node newNode = new Node(word);
             if (this.last == null) {
                 this.first = newNode;
                 this.last = newNode;
@@ -37,7 +37,7 @@
             this.numberOfElements++;
 
         } else {
-            Node newNode = new Node(element);
+            Node newNode = new Node(word);
             Node currentlyNode = this.first;
             for (int i = 0; i < position - 1; i++) {
                 currentlyNode = currentlyNode.getNext();
@@ -85,7 +85,7 @@
         Node currentNode = this.first;
         System.out.println("Lista: ");
         while (currentNode != null) {
-            System.out.print(currentNode.getElement() + " ");
+            System.out.print(currentNode.getWord() + " ");
             currentNode = currentNode.getNext();
         }
     }
Index: src/br/com/unifor/structures/Node.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.unifor.structures;\r\n\r\npublic class Node {\r\n    private int element;\r\n    private Node next;\r\n\r\n    public Node(int element) {\r\n        this.element = element;\r\n        this.next = null;\r\n    }\r\n\r\n    public int getElement() {\r\n        return element;\r\n    }\r\n\r\n    public void setElement(int element) {\r\n        this.element = element;\r\n    }\r\n\r\n    public Node getNext() {\r\n        return next;\r\n    }\r\n\r\n    public void setNext(Node next) {\r\n        this.next = next;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/br/com/unifor/structures/Node.java b/src/br/com/unifor/structures/Node.java
--- a/src/br/com/unifor/structures/Node.java	(revision 4af214dda39eb8e50e317bca377a7dac6141dfb8)
+++ b/src/br/com/unifor/structures/Node.java	(date 1748808253297)
@@ -1,20 +1,21 @@
 package br.com.unifor.structures;
 
 public class Node {
-    private int element;
+    private Word word;
     private Node next;
 
-    public Node(int element) {
-        this.element = element;
+    public Node(Word word) {
+        this.word = word;
         this.next = null;
     }
 
-    public int getElement() {
-        return element;
+    public Word getWord() {
+
+        return word;
     }
 
-    public void setElement(int element) {
-        this.element = element;
+    public void setWord(Word word) {
+        this.word = word;
     }
 
     public Node getNext() {
Index: src/br/com/unifor/structures/ABB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/br/com/unifor/structures/ABB.java b/src/br/com/unifor/structures/DynamicQueue.java
rename from src/br/com/unifor/structures/ABB.java
rename to src/br/com/unifor/structures/DynamicQueue.java
--- a/src/br/com/unifor/structures/ABB.java	(revision 4af214dda39eb8e50e317bca377a7dac6141dfb8)
+++ b/src/br/com/unifor/structures/DynamicQueue.java	(date 1748808403985)
@@ -1,4 +1,90 @@
 package br.com.unifor.structures;
 
-public class ABB {
+public class DynamicQueue {
+
+    private Node head;
+    private Node tail;
+    private int size;
+
+    public DynamicQueue() {
+        this.head = null;
+        this.tail = null;
+        this.size = 0;
+    }
+
+    public int size() {
+        return this.size;
+    }
+
+    public boolean isEmpty() {
+        return this.size == 0;
+    }
+
+    public void print() {
+        System.out.print("[");
+        Node cursor = this.head;
+        for (int i = 0; i < this.size; i++) {
+            System.out.print(cursor.getWord() + " ");
+            cursor = cursor.getNext();
+        }
+        if (this.size == 0) {
+            System.out.println("] Head: " + this.head + ", Tail: " + this.tail);
+        } else {
+            System.out.println("] Head: " + this.head.getWord() + ", Tail: " + this.tail.getWord());
+        }
+    }
+
+    public Word dequeue() {
+        if (this.isEmpty()) {
+            System.out.println("Queue is empty. Cannot remove.");
+            return null;
+        }
+
+        Node removedNode = this.head;
+
+        if (this.size == 1) {
+            this.head = null;
+            this.tail = null;
+        } else {
+            this.head = removedNode.getNext();
+            removedNode.setNext(null);
+        }
+
+        this.size--;
+
+        return removedNode.getWord();
+    }
+
+    public void enqueue(Word word) {
+        Node newNode = new Node(word);
+
+        if (this.isEmpty()) {
+            this.head = newNode;
+        } else {
+            this.tail.setNext(newNode);
+        }
+
+        this.tail = newNode;
+        this.size++;
+    }
+
+    public Word peek() {
+        if (this.isEmpty()) {
+            System.out.println("Queue is empty! Cannot peek.");
+            return null;
+        }
+
+        return this.head.getWord();
+    }
+
+    public boolean contains(Word word) {
+        Node cursor = this.head;
+        for (int i = 0; i < this.size; i++) {
+            if (cursor.getWord().equals(word)) {
+                return true;
+            }
+            cursor = cursor.getNext();
+        }
+        return false;
+    }
 }
